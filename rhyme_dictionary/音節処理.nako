TEMP＝「」
オンセット子音＝「(p|t|k|z|f|c|x|q|ts|ch|fh|sh|th|kh|ph)*(b|d|g)*(dz|dh|rkh|vh|s|h|v)*(n|m|ng|l|rl|r)*(w|j)*」
母音＝「(a|i|u|e|o|y|i'|u'|y')」
子音＝「(w|j|n|m|ng|l|r|dz|dh|rkh|vh|s|h|v|p|t|k|z|f|c|x|q|ts|ch|fh|sh|th|kh|ph|b|d|g|'r)」
R除いた子音＝「(w|j|n|m|ng|l|dz|dh|rkh|vh|s|h|v|p|t|k|z|f|c|x|q|ts|ch|fh|sh|th|kh|ph|b|d|g)」
弱母音除いた母音＝「(a|e|o)」
検索後＝「」
検索文字＝「」
「{作業フォルダ}lineparine7900.txt」を開いて、「unicode」から「sjis」へ文字コード変換して、辞書データに代入。
「Ctrl+F」に「検索処理」をホットキー登録
辞書データ行数に辞書データの行数を代入。
#----------------------------------------------

●音節分割する（Aを）
　　TEMPに「」を代入。
　　それはA
　　/*
　　母音+r+母音を正しく処理できていないので変換する
　　*/
　　「{母音}r{母音}」を「$1rr$2」に正規表現置換。
　　/*
　　#-----------------------------------------------
　　'r, i', u', y'以外の音声に関係ない'を取り除く
　　*/
　　「{弱母音除いた母音}'{R除いた子音}」を「$1$2」に正規表現置換。
　　「{子音}'{R除いた子音}」を「$1$2」に正規表現置換。
　　#-----------------------------------------------
　　「{子音}{母音}」を「/$1$2」へ正規表現置換。
　　「{母音}{母音}」を「$1/$2」へ正規表現置換。
　　それを分割結果に代入。
　　/*
　　現状、前からスラッシュを入れるためにstrirviのような文字列は
　　st/rir/viのような分割結果となるためにstが短音節扱いになって
　　しまう。そのための処理を下に書いているが、なかなかに難しいね。
　　*/
　　#処理を四回行う、リパライン語の子音は4連続しかしないため、これで良いが力技になってて汚い。
　　　分割結果の「^{子音}/{子音}」を「/$1$2」へ正規表現置換して、分割結果に代入　#先頭の子音を処理したい。
　　　分割結果の「^{子音}{子音}/{子音}」を「/$1$2$3」へ正規表現置換して、分割結果に代入　#先頭の子音を処理したい。
　　　分割結果の「^{子音}{子音}{子音}/{子音}」を「/$1$2$3$4」へ正規表現置換して、分割結果に代入　#先頭の子音を処理したい。
　　　分割結果の「^{子音}{子音}{子音}{子音}/{子音}」を「/$1$2$3$4$5」へ正規表現置換して、分割結果に代入　#先頭の子音を処理したい。
　　#-----------------------------------------------
　　/*
　　半母音が分割される処理を修正する。
　　上までの処理の段階ではverliestraのような文字列は
　　/ver/li/est/raと分割されているためi, u, y/母音を結合させる
　　*/
　　分割結果の「(i|u|y)/{母音}」を「$1$2」に正規表現置換して、分割結果に代入。
　　#-----------------------------------------------
　　分割結果の「^/」を「」に正規表現置換。　#先頭の/を取り除く、無いと長短の変換がバグる
　　それの「/」を「{改行}」に置換。　#反復のために改行に変換する
　　それを反復
　　　それをAに代入。
　　　＃Aを表示。＃デバッグコード
　　　もし（Aを「{母音}(w|j|n|m|ng|l|r|dz|dh|rkh|vh|s|h|v|p|t|k|z|f|c|x|q|ts|ch|fh|sh|th|kh|ph|b|d|g|i|u|'r)+$」で正規表現マッチ）ならば、TEMPに「{TEMP}-」を代入。
　　　違えば、TEMPに「{TEMP}^」を代入。
　　TEMPで戻る。

※※※積み木デザイナ:ここから※
※ 以下はデザインデータです。
※ コメントを削除しないようにしてください。
※ ---
※母艦とはフォーム##生成
母艦は「メインフォーム」
そのクライアントW=640#数値
そのクライアントH=400#数値
そのタイトル=「なでしこ」#文字列
※ ---
メモ1とはエディタ##生成
そのX=8#数値
そのY=8#数値
そのW=624#数値
そのH=24#数値
そのテキスト=「」#文字列
その変更した時は〜メモ1__変更した時#イベント
※ ---
メモ2とはエディタ##生成
そのX=8#数値
そのY=32#数値
そのW=536#数値
そのH=32#数値
そのテキスト=「」#文字列
※ ---
エディタ1とはメモ##生成
そのX=8#数値
そのY=64#数値
そのW=624#数値
そのH=312#数値
そのテキスト=「」#文字列
そのスクロールバー=「縦」#文字列
※ ---
ボタン1とはボタン##生成
そのX=544#数値
そのY=32#数値
そのW=88#数値
そのH=32#数値
そのテキスト=「更新」#文字列
そのクリックした時は〜ボタン1__クリックした時#イベント
※※※積み木デザイナ:ここまで※

STAとはステータスバー
STAのテキストは「韻文検索ツール」

●メモ1__変更した時
　　# ここにイベントを書きます。
　　# 字下げした部分がイベント範囲です。
　　カウンタ＝0
　　エディタ1のテキストに「」を代入。
　　メモ1のテキストを音節分割する。
　　それをメモ2のテキストに代入。
　　辞書データを反復
　　　それをAに代入
　　　Aの「(.*) /// .*」を「$1」へ正規表現置換。
　　　それを音節分割する。
　　　もし、（それがメモ2のテキストと等しい）ならば、検索後に「{検索後}{改行}#-----------------------------------------------{改行}{A}」を代入。
　　　0.00000000001秒待つ。
　　　カウンタに「{カウンタ+1}」を代入。
　　　STAのテキストは「検索進捗は{(カウンタ/辞書データ行数)*100}%」。
　　戻る。

●ボタン1__クリックした時
　　エディタ1のテキストに検索後を代入。
　　# 字下げした部分がイベント範囲です。

●検索処理
　　「検索します」で尋ねる。
　　それを検索内容に代入
　　検索後を反復//変数（パス）の中のデータを反復して，一行づつ処理しています。
　　　　対象が「*{検索内容}*」にワイルドカードマッチ
　　　　もし，それが空でなければ
　　　　　　それを検索文字に配列追加//マッチしたデータを検索文字（配列変数）に積み重ねるように追加してます。
　　もし、検索文字が空ならば、「見つかりませんでした」と言う。
　　違えば、検索文字をメモ記入。//検索結果の表示
　　戻る。
